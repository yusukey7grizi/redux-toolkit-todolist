{"version":3,"sources":["features/Todo/Todo.Slice.ts","features/Form/form.tsx","features/Todo/Todo.tsx","features/Todo/Todolist.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["TodoSlice","createSlice","name","initialState","IdCounter","Tasks","reducers","addTodo","state","action","newTodo","id","text","payload","deleteTodo","filter","task","actions","selectTodo","Form","useState","InputText","setInputText","dispatch","useDispatch","console","log","onSubmit","event","preventDefault","className","TextField","onChange","e","target","value","label","variant","required","type","Todo","props","EachTask","onClick","Todolist","TodoSelector","useSelector","map","App","store","configureStore","reducer","TodoReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mWAYaA,EAAYC,YAAY,CACnCC,KAAM,WACNC,aAPiC,CACjCC,UAAW,EACXC,MAAO,IAOPC,SAAU,CACRC,QAAS,SAACC,EAAOC,GACfD,EAAMJ,YACN,IAAMM,EAAU,CACdC,GAAIH,EAAMJ,UACVQ,KAAMH,EAAOI,SAEfL,EAAMH,MAAN,sBAAkBG,EAAMH,OAAxB,CAA+BK,KAEjCI,WAAY,SAACN,EAAOC,GAClBD,EAAMH,MAAQG,EAAMH,MAAMU,QAAO,SAACC,GAAD,OAAUA,EAAKL,KAAOF,EAAOI,QAAQF,UAKrE,EAAgCX,EAAUiB,QAAlCV,EAAR,EAAQA,QAASO,EAAjB,EAAiBA,WAEXI,EAAa,SAACV,GAAD,OAAsBA,EAAMQ,MAEvChB,IAAf,Q,OCDemB,EA5BF,WACX,MAAkCC,mBAA0B,IAA5D,mBAAOC,EAAP,KAAkBC,EAAlB,KACMC,EAAWC,cACjBC,QAAQC,IAAIL,GAMZ,OACE,uBAAMM,SANc,SAACC,GACrBA,EAAMC,iBACNN,EAAShB,EAAQc,IACjBC,EAAa,KAGkBQ,UAAU,OAAzC,UACE,cAACC,EAAA,EAAD,CACEC,SAAU,SAACC,GACTX,EAAaW,EAAEC,OAAOC,QAExBxB,GAAG,iBACHyB,MAAM,aACNC,QAAQ,WACRF,MAAOd,EACPiB,UAAU,IAEZ,wBAAQC,KAAK,SAAST,UAAU,YAAhC,SACE,cAAC,IAAD,CAASA,UAAU,kB,yBCLZU,G,MAfe,SAACC,GAC7B,IAAMlB,EAAWC,cACjB,OACE,sBAAKM,UAAU,cAAf,UACE,8BAAMW,EAAMC,SAAS9B,OACrB,wBACE+B,QAAS,kBAAMpB,EAAST,EAAW2B,EAAMC,YACzCZ,UAAU,SAFZ,SAIE,cAAC,IAAD,CAAYA,UAAU,gBCCfc,EAbY,WACzB,IAAMC,EAAeC,YAAY5B,GACjC,OACE,qBAAKY,UAAU,UAAf,SACE,8BACGe,EAAaxC,MAAM0C,KAAI,SAAC/B,GAAD,OACtB,cAAC,EAAD,CAAoB0B,SAAU1B,GAAnBA,EAAKL,YCKXqC,EAVO,WACpB,OACE,sBAAKlB,UAAU,MAAf,UACE,8DACA,cAAC,EAAD,IACA,cAAC,EAAD,QCROmB,EAAQC,YAAe,CAClCC,QAAS,CACPnC,KAAMoC,KCOUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUX,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJY,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACN7C,QAAQ6C,MAAMA,EAAMC,c","file":"static/js/main.8244792d.chunk.js","sourcesContent":["import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { RootState, AppThunk } from \"../../app/store\";\r\n\r\nexport interface CounterState {\r\n  IdCounter: number;\r\n  Tasks: { id: number; text: string }[];\r\n}\r\nconst initialState: CounterState = {\r\n  IdCounter: 0,\r\n  Tasks: [],\r\n};\r\n\r\nexport const TodoSlice = createSlice({\r\n  name: \"TodoList\",\r\n  initialState,\r\n\r\n  reducers: {\r\n    addTodo: (state, action) => {\r\n      state.IdCounter++;\r\n      const newTodo = {\r\n        id: state.IdCounter,\r\n        text: action.payload,\r\n      };\r\n      state.Tasks = [...state.Tasks, newTodo];\r\n    },\r\n    deleteTodo: (state, action) => {\r\n      state.Tasks = state.Tasks.filter((task) => task.id !== action.payload.id);\r\n    },\r\n  },\r\n});\r\n\r\nexport const { addTodo, deleteTodo } = TodoSlice.actions;\r\n\r\nexport const selectTodo = (state: RootState) => state.task;\r\n\r\nexport default TodoSlice.reducer;\r\n","import { Button, TextField } from \"@material-ui/core\";\r\nimport React, { useState } from \"react\";\r\nimport \"./Form.css\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { addTodo } from \"../Todo/Todo.Slice\";\r\nconst Form = () => {\r\n  const [InputText, setInputText] = useState<string | number>(\"\");\r\n  const dispatch = useDispatch();\r\n  console.log(InputText);\r\n  const SubmitHandler = (event: React.FormEvent) => {\r\n    event.preventDefault();\r\n    dispatch(addTodo(InputText));\r\n    setInputText(\"\");\r\n  };\r\n  return (\r\n    <form onSubmit={SubmitHandler} className=\"form\">\r\n      <TextField\r\n        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n          setInputText(e.target.value);\r\n        }}\r\n        id=\"outlined-basic\"\r\n        label=\"Add a Task\"\r\n        variant=\"outlined\"\r\n        value={InputText}\r\n        required={true}\r\n      />\r\n      <button type=\"submit\" className=\"addbutton\">\r\n        <AddIcon className=\"addicon\" />\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport \"./todo.css\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { deleteTodo } from \"./Todo.Slice\";\r\ntype Props = {\r\n  EachTask: { id: number; text: string };\r\n};\r\nconst Todo: React.FC<Props> = (props) => {\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <div className=\"todowrapper\">\r\n      <div>{props.EachTask.text}</div>\r\n      <button\r\n        onClick={() => dispatch(deleteTodo(props.EachTask))}\r\n        className=\"button\"\r\n      >\r\n        <DeleteIcon className=\"icon\" />\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Todo;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport \"./todolist.css\";\r\nimport Todo from \"./Todo\";\r\nimport { selectTodo } from \"./Todo.Slice\";\r\nconst Todolist: React.FC = () => {\r\n  const TodoSelector = useSelector(selectTodo);\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <div>\r\n        {TodoSelector.Tasks.map((task) => (\r\n          <Todo key={task.id} EachTask={task} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Todolist;\r\n","import React, { useState } from \"react\";\n\nimport \"./App.css\";\nimport Form from \"./features/Form/form\";\nimport Todolist from \"./features/Todo/Todolist\";\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <h1>React Redux-Toolkit Todolist</h1>\n      <Form />\n      <Todolist />\n    </div>\n  );\n};\n\nexport default App;\n","import { configureStore, ThunkAction, Action } from \"@reduxjs/toolkit\";\n\nimport TodoReducer from \"../features/Todo/Todo.Slice\";\nexport const store = configureStore({\n  reducer: {\n    task: TodoReducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}