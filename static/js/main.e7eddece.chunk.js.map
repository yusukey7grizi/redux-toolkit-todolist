{"version":3,"sources":["features/Todo/Todo.Slice.ts","features/Form/form.tsx","features/Todo/Todo.tsx","features/Todo/Todolist.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["TodoSlice","createSlice","name","initialState","IdCounter","Tasks","reducers","addTodo","state","action","newTodo","id","text","payload","editTodo","SelectedTodo","find","task","deleteTodo","filter","actions","selectTodo","Form","useState","InputText","setInputText","dispatch","useDispatch","console","log","onSubmit","event","preventDefault","className","TextField","onChange","e","target","value","inputProps","maxLength","label","variant","required","type","useStyles","makeStyles","theme","wrapper","padding","root","width","backgroundColor","display","margin","borderRadius","title","fontSize","fontFamily","buttonWrapper","paper","height","marginLeft","marginRight","marginTop","editContent","flexDirection","rand","Math","round","random","getModalStyle","top","left","transform","Todo","props","classes","React","modalStyle","open","setOpen","EachTask","body","Grid","style","defaultValue","Button","color","IconButton","onClick","window","confirm","Modal","onClose","aria-labelledby","aria-describedby","Todolist","TodoSelector","useSelector","map","App","store","configureStore","reducer","TodoReducer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e7eddece.chunk.js","sourcesContent":["import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { RootState, AppThunk } from \"../../app/store\";\r\n\r\nexport interface CounterState {\r\n  IdCounter: number;\r\n  Tasks: { id: number; text: string }[];\r\n}\r\nconst initialState: CounterState = {\r\n  IdCounter: 0,\r\n  Tasks: [],\r\n};\r\n\r\nexport const TodoSlice = createSlice({\r\n  name: \"TodoList\",\r\n  initialState,\r\n\r\n  reducers: {\r\n    addTodo: (state, action) => {\r\n      state.IdCounter++;\r\n      const newTodo = {\r\n        id: state.IdCounter,\r\n        text: action.payload,\r\n      };\r\n      state.Tasks = [...state.Tasks, newTodo];\r\n    },\r\n    editTodo: (state, action) => {\r\n      const SelectedTodo = state.Tasks.find(\r\n        (task) => task.id === action.payload.id\r\n      );\r\n      if (SelectedTodo) {\r\n        SelectedTodo.text = action.payload.text;\r\n      }\r\n    },\r\n    deleteTodo: (state, action) => {\r\n      state.Tasks = state.Tasks.filter((task) => task.id !== action.payload.id);\r\n    },\r\n  },\r\n});\r\n\r\nexport const { addTodo, deleteTodo, editTodo } = TodoSlice.actions;\r\n\r\nexport const selectTodo = (state: RootState) => state.task;\r\n\r\nexport default TodoSlice.reducer;\r\n","import { Button, TextField } from \"@material-ui/core\";\r\nimport React, { useState } from \"react\";\r\nimport \"./Form.css\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { addTodo } from \"../Todo/Todo.Slice\";\r\nconst Form = () => {\r\n  const [InputText, setInputText] = useState<string | number>(\"\");\r\n  const dispatch = useDispatch();\r\n  console.log(InputText);\r\n  const SubmitHandler = (event: React.FormEvent) => {\r\n    event.preventDefault();\r\n    dispatch(addTodo(InputText));\r\n    setInputText(\"\");\r\n  };\r\n  return (\r\n    <form onSubmit={SubmitHandler} className=\"form\">\r\n      <TextField\r\n        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n          setInputText(e.target.value);\r\n        }}\r\n        inputProps={{ maxLength: 25 }}\r\n        id=\"outlined-basic\"\r\n        label=\"Add a Task\"\r\n        variant=\"outlined\"\r\n        value={InputText}\r\n        required={true}\r\n      />\r\n      <button type=\"submit\" className=\"addbutton\">\r\n        <AddIcon className=\"addicon\" />\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { deleteTodo, editTodo } from \"./Todo.Slice\";\r\nimport { Button, Grid, IconButton } from \"@material-ui/core\";\r\nimport Modal from \"@material-ui/core/Modal\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport { TextField } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  wrapper: {\r\n    padding: \"5px\",\r\n  },\r\n  root: {\r\n    width: \"50%\",\r\n    backgroundColor: \"white\",\r\n    display: \"flex\",\r\n    margin: \"auto\",\r\n    borderRadius: \"5px\",\r\n    padding: \"5px\",\r\n  },\r\n  title: {\r\n    fontSize: \"20px\",\r\n    margin: \"auto\",\r\n    fontFamily: \"'Noto Sans JP', sans-serif\",\r\n  },\r\n  buttonWrapper: {},\r\n  paper: {\r\n    borderRadius: \"10px\",\r\n    backgroundColor: \"white\",\r\n    width: \"400px\",\r\n    height: \"200px\",\r\n    marginLeft: \"50%\",\r\n    marginRight: \"50%\",\r\n    marginTop: \"300px\",\r\n  },\r\n  editContent: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    padding: \"2px\",\r\n    margin: \"auto\",\r\n  },\r\n}));\r\nfunction rand() {\r\n  return Math.round(Math.random() * 20) - 10;\r\n}\r\n\r\nfunction getModalStyle() {\r\n  const top = 50 + rand();\r\n  const left = 50 + rand();\r\n\r\n  return {\r\n    top: `${top}%`,\r\n    left: `${left}%`,\r\n    transform: `translate(-${top}%, -${left}%)`,\r\n  };\r\n}\r\ntype Props = {\r\n  EachTask: { id: number; text: string };\r\n};\r\nconst Todo: React.FC<Props> = (props) => {\r\n  const dispatch = useDispatch();\r\n  const classes = useStyles();\r\n  const [modalStyle] = React.useState(getModalStyle);\r\n  const [open, setOpen] = React.useState(false);\r\n  const [InputText, setInputText] = React.useState(props.EachTask.text);\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n    setInputText(props.EachTask.text);\r\n  };\r\n  const SubmitHandler = (event: React.FormEvent) => {\r\n    event.preventDefault();\r\n    dispatch(editTodo({ id: props.EachTask.id, text: InputText }));\r\n    setOpen(false);\r\n    setInputText(props.EachTask.text);\r\n  };\r\n\r\n  const DeleteHandler = () => {\r\n    const r = window.confirm(\r\n      `Are you sure you want to delete \"${props.EachTask.text}\"? `\r\n    );\r\n    if (r == true) {\r\n      dispatch(deleteTodo(props.EachTask));\r\n    } else {\r\n      return false;\r\n    }\r\n  };\r\n  const body = (\r\n    <Grid style={modalStyle} className={classes.paper}>\r\n      {\" \"}\r\n      <form className={classes.editContent} onSubmit={SubmitHandler}>\r\n        <Grid>\r\n          {\" \"}\r\n          <TextField\r\n            style={{ marginTop: \"50px\" }}\r\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n              setInputText(e.target.value);\r\n            }}\r\n            id=\"outlined-basic\"\r\n            defaultValue={props.EachTask.text}\r\n            variant=\"outlined\"\r\n            value={InputText}\r\n            required={true}\r\n            inputProps={{ maxLength: 25 }}\r\n          />\r\n        </Grid>\r\n        <Grid style={{ marginTop: \"10px\" }}>\r\n          {\" \"}\r\n          <Button type=\"submit\" variant=\"outlined\" color=\"secondary\">\r\n            Submit\r\n          </Button>\r\n        </Grid>\r\n      </form>\r\n    </Grid>\r\n  );\r\n  return (\r\n    <Grid className={classes.wrapper}>\r\n      <Grid className={classes.root}>\r\n        {\" \"}\r\n        <Grid className={classes.title}>{props.EachTask.text}</Grid>\r\n        <Grid className={classes.buttonWrapper}>\r\n          {\" \"}\r\n          <IconButton onClick={DeleteHandler}>\r\n            <DeleteIcon />\r\n          </IconButton>\r\n          <IconButton\r\n            onClick={() => {\r\n              setOpen(true);\r\n            }}\r\n          >\r\n            <EditIcon />\r\n          </IconButton>\r\n        </Grid>\r\n      </Grid>{\" \"}\r\n      <Modal\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"simple-modal-title\"\r\n        aria-describedby=\"simple-modal-description\"\r\n      >\r\n        {body}\r\n      </Modal>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Todo;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport \"./todolist.css\";\r\nimport Todo from \"./Todo\";\r\nimport { selectTodo } from \"./Todo.Slice\";\r\nconst Todolist: React.FC = () => {\r\n  const TodoSelector = useSelector(selectTodo);\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <div>\r\n        {TodoSelector.Tasks.map((task) => (\r\n          <Todo key={task.id} EachTask={task} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Todolist;\r\n","import React, { useState } from \"react\";\n\nimport \"./App.css\";\nimport Form from \"./features/Form/form\";\nimport Todolist from \"./features/Todo/Todolist\";\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <h1>React Redux-Toolkit Todolist</h1>\n      <Form />\n      <Todolist />\n    </div>\n  );\n};\n\nexport default App;\n","import { configureStore, ThunkAction, Action } from \"@reduxjs/toolkit\";\n\nimport TodoReducer from \"../features/Todo/Todo.Slice\";\nexport const store = configureStore({\n  reducer: {\n    task: TodoReducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}